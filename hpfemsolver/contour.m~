function contour(nelemt,nelemq,orders,Meshst,Meshsq,order,splitq,dir,glob,Meshq,Mesht,sol,splitt,unkv,xt,wt,...
intxi,inteta,intw,unkvh,unkvi,sbasisth1,edges,cuthelp,unkcut,nodeflag,ymax);

coordn=Meshsq.Coordinates;
intman=Meshst.Elements;
[npoinn,i]=size(coordn);
intmaq=Meshq.Elements;
intmat=Mesht.Elements;
coord=Meshq.Coordinates;

% Quantities for triangular splittings
nintpt=0;
for i=1:orders
   nintpt=nintpt+i;
end
%  number of elements per triangle
nelpt=4;
for i=1:orders
   nelpt=nelpt+3+(2*i);
end
% number of points per triangle
nptri=6;
for i=1:orders
   nptri=nptri+(3+i);
end
epetq=splitquad(orders);
[epett,layer]=splittri(orders,nptri);

phxstore=[];
phystore=[];
phcstore=[];
phxh1store=[];
phyh1store=[];
for q=1:(orders+3)^2            
   xi=epetq(q,1);
   eta=epetq(q,2);
   ph=basisq(order,xi,eta);
   phxstore=[phxstore, ph(:,1)];
   phystore=[phystore, ph(:,2)];
   phc=curlbasisq(order,xi,eta);
   phcstore=[phcstore, phc(:)];
   ph=gbasisqh1(order+1,xi,eta);
   phxh1store=[phxh1store, ph(:,1)];
   phyh1store=[phyh1store, ph(:,2)];
end
phxtstore=[];
phytstore=[];
phctstore=[];
phxth1store=[];
phyth1store=[];
phth1store=[];
for q=1:nptri          
   xi=0.99*epett(q,1);
   eta=0.99*epett(q,2);
   ph=basist(order,xi,eta);
   phxtstore=[phxtstore, ph(:,1)];
   phytstore=[phytstore, ph(:,2)];
   phct=curlbasist(order,xi,eta);
   phctstore=[phctstore, phct(:)];
   ph=gbasisth1(order+1,xi,eta);
   phxth1store=[phxth1store, ph(:,1)];
   phyth1store=[phyth1store, ph(:,2)];
   phh1=basisth1(order+1,xi,eta);
   phth1store=[phth1store, phh1];
end

out=zeros(npoinn,2);
help=zeros(npoinn,1);
outc=zeros(npoinn,1);
outh1=zeros(npoinn,1);

%     loop over quad elements...      
for j=1:nelemq     
   esize=4*(order+1)+2*order*(order+1);
   esizeh1=4+4*order+order*order;

   for q=1:(orders+3)^2
       xav=0;
       yav=0;            
       for p=1:4
       for pp=1:2
          xy(p,pp)=coord(intmaq(j,p),pp);
       end
       xav=xav+xy(p,1);
       yav=yav+xy(p,2);
       end
            
       xi=epetq(q,1);
       eta=epetq(q,2);
       J=mapquad(xy,xi,eta);
       detJ=det(J);
       Jinvt=(inv(J))';
       phx=phxstore(:,q);
       phy=phystore(:,q);
       ph=[phx phy];
       phxy=Jinvt*ph';
       phxy=phxy';
       phc=phcstore(:,q)./detJ;
        phx=phxh1store(:,q);
       phy=phyh1store(:,q);
       ph=[phx phy];
       phxyh1=Jinvt*ph';
       phxyh1=phxyh1';
       
% lowest order block
      for l=1:4
	 lunkv(l)=unkv(intmaq(j,l));
	 ldrv(l)=1;
      end
      if order > 0
 % Higher order edges Vertex
         for l=1:3
         for p=0:order-1
            lunkv(3+l+3*(p))=unkvh(glob(j+nelemq+nelemqin,l),p+1);
            ldrv(3+l+3*(p))=dir(j+nelemq+nelemqin,l)^(p+2);
         end
         end
% Interior block Vertex
         for k=1:order*(order-1)/2
            lunkv(3+3*order+k)=unkvi(j,k);
            ldrv(3+3*(order)+k)=1;    
         end
       end
      
      
      etil=zeros(2,1);
      cetil=0;
    

      for k=1:esizeh1

      if lunkv(k) >0      
%           etil(1)=etil(1)+(phxyh1(k,1)'.*(sol(lunkv(k))).*ldrv(k))*kappa2;   
%           etil(2)=etil(2)+(phxyh1(k,2)'.*(sol(lunkv(k))).*ldrv(k))*kappa2;   		
      end
      end


      
      out(splitq(j,q),1)=out(splitq(j,q),1)+(etil(1));
      out(splitq(j,q),2)=out(splitq(j,q),2)+(etil(2));
      outc(splitq(j,q),1)=outc(splitq(j,q),1)+(cetil(1));
      help(splitq(j,q))=help(splitq(j,q))+1;
   end
end

%     loop over triangular elements...      
for j=1:nelemt   
   esize=3;
   if order>0   
   esize=(order+1)*(order+2);
   end
   esizeh1=3+3*order+(order-1)*order/2;

       for p=1:3
       for pp=1:2
          xyt(p,pp)=coord(intmat(j,p),pp);
       end
       end
       
       for p=1:3
       lbc(p)=edges(glob(j,p),3);
       end
       for p=1:3
       lbcn(p)=nodeflag(intmat(j,p));
       end

 
   for q=1:nptri  

            
       xi=epett(q,1);
       eta=epett(q,2);
       J=maptri(xyt,xi,eta);
       detJ=det(J);
       Jinvt=(inv(J))';
       phx=phxtstore(:,q);
       phy=phytstore(:,q);
       ph=[phx phy];
       phxy=Jinvt*ph';
       phxy=phxy';
       phct=phctstore(:,q)./detJ;
% lowest order block
       lunkv=zeros(esizeh1,1);
      for l=1:3
	     lunkv(l)=unkv(intmat(j,l));
	     ldrv(l)=1;
      end
      if order > 0
% Higher order edges Vertex
         for l=1:3
         for p=0:order-1
            lunkv(3+l+3*(p))=unkvh(glob(j+nelemq,l),p+1);
            ldrv(3+l+3*(p))=dir(j+nelemq,l)^(p+2);
         end
         end
% Interior block Vertex
         for k=1:order*(order-1)/2
            lunkv(3+3*order+k)=unkvi(j,k);
            ldrv(3+3*(order)+k)=1;    
         end
       end
      if cuthelp(j) <0 
      lunkv(esizeh1+1)=unkcut(1);
      ldrv(esizeh1+1)=1;
      else
      lunkv(esizeh1+1)=0;
      ldrv(esizeh1+1)=1;
      end
      
       phx=phxth1store(:,q);
       phy=phyth1store(:,q);
       ph=[phx phy];
       phxyh1=Jinvt*ph';
       phxyh1=phxyh1';
       phh1=phth1store(:,q);
       
       if cuthelp(j)==-1 
          if lbc(1)==3
       % edge 1 is the cut boundary
       % nodes 1 and 2
          phxyh1(esizeh1+1,:)=phxyh1(1,:)+phxyh1(2,:);
	  phh1(esizeh1+1)=phh1(1)+phh1(2);
          elseif lbc(2)==3
       % edge 2 is the cut boundary
       % nodes 2 and 3
          phxyh1(esizeh1+1,:)=phxyh1(2,:)+phxyh1(3,:);
	  phh1(esizeh1+1)=phh1(2)+phh1(3);
          elseif lbc(3)==3
       % edge 3 is the cut boundary
       % nodes 3 and 1
          phxyh1(esizeh1+1,:)=phxyh1(3,:)+phxyh1(1,:);
	  phh1(esizeh1+1)=phh1(3)+phh1(1);
          else
          disp('No cut boundary found for flagged element');
          end
       elseif cuthelp(j)==-2
	      if lbcn(1)==1
          % nodes 1 
          phh1(esizeh1+1)=phh1(1);
          elseif lbcn(2)==1
          % nodes 2 
          phh1(esizeh1+1)=phh1(2);
          elseif lbcn(3)==1
          % nodes 3 
          phh1(esizeh1+1)=phh1(3);
          end   
       end
       
       
      etil=zeros(2,1);
      phiv=0;

      for k=1:esizeh1%+1
      if lunkv(k) >0
        etil(1)=etil(1)+(phxyh1(k,1)'.*(sol(lunkv(k)).*ldrv(k)));   
        etil(2)=etil(2)+(phxyh1(k,2)'.*(sol(lunkv(k)).*ldrv(k)));   
      end        
      end
      for k=1:esizeh1+1
      if lunkv(k) >0
        phiv=phiv+(phh1(k)'.*(sol(lunkv(k)).*ldrv(k)));
      end        
      end
      
      out(splitt(j,q),1)=out(splitt(j,q),1)+(etil(1));
      out(splitt(j,q),2)=out(splitt(j,q),2)+(etil(2));
      outh1(splitt(j,q))=outh1(splitt(j,q))+phiv;
      
      
      help(splitt(j,q))=help(splitt(j,q))+1;
   end
end


%disp(['circulation',num2str(sol(unkcut(1)))])

for i=1:npoinn
if help(i) ~= 0
out(i,1)=out(i,1)./help(i);
out(i,2)=out(i,2)./help(i);
outh1(i)=outh1(i)/help(i);
else 
out(i,1)=0;
out(i,2)=0;
disp('point not found')
end
end

figure
plot_LFE(outh1,Meshst);
figure
quiver(coordn(:,1),coordn(:,2),out(:,1),out(:,2))
%figure
%triplot(intman,coordn(:,1),coordn(:,2),'Color',[1,1,1]*0.75);
%hold on; quiver(coordn(:,1),coord(:,2),out(:,1),out(:,2),25,'k'); hold off;

Npts=30;
y0=-ymax*ones(Npts,1);
x0=[-ymax+0.05:(2*ymax-0.1)/(Npts-1):ymax-0.05]';

disp('Computing streamlines . . .');
FlowP=TriStream(intman,coordn(:,1),coordn(:,2),out(:,1),out(:,2),x0,y0,0,2e3,1e-3,2e-1);
PlotTriStream(FlowP,'r');
hold on; plot(x0,y0,'r.'); hold off;


for i=1:2
figure
% call to plotting of values
%plot_LFE(out(:,i),Meshst)
hold on;
plot_LFE(real(out(:,i)),Meshsq);
plot_LFE(real(out(:,i)),Meshst);
colorbar
hold off;
figure;
hold on;
plot_LFE(imag(out(:,i)),Meshsq);
plot_LFE(imag(out(:,i)),Meshst);
colorbar
hold off;

end

%for i=1:npoinn
%phi=atan2(imag(outc(i)),real(outc(i)));
%if phi >= 0 & phi <= pi/2
%outc(i)=abs(outc(i));
%elseif phi <= -pi/2 & phi >= -pi
%outc(i)=abs(outc(i));
%else
%outc(i)=-1*abs(outc(i));
%end
%end

%for i=1:npoinn
%phi=atan2(imag(outc(i)),real(outc(i)))
%if phi >= 0 && phi <= pi/2
%outc(i)=abs(outc(i));
%elseif phi < 0 && phi >= -pi/2
%outc(i)=abs(outc(i));
%else
%outc(i)=-1*abs(outc(i));
%end
%end


